name: Init Terraform Backend Reusable Workflow

on:
  workflow_call:
    inputs:
      baseName:
        required: true
        type: string
      environment:
        required: true
        type: string
      location:
        required: true
        type: string
      terraformStateFileName:
        required: true
        type: string
      terraformStateContainerName:
        required: true
        type: string
      defaultStorageAccountTier:
        required: true
        type: string
      defaultStorageAccountReplicationType:
        required: true
        type: string
      defaultStorageAccountEncryptionServices:
        required: true
        type: string
      defaultStorageAccountMinTlsVersion:
        required: true
        type: string
    secrets:
      azureClientId:
        required: true
      azureTenantId:
        required: true
      azureSubscriptionId:
        required: true


jobs:
  init-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Set variables
        run: |
          echo "resourceGroupName=rg-${{ inputs.baseName }}-${{ inputs.environment }}-${{ inputs.location }}" >> $GITHUB_ENV
          echo "storageAccountName=st${{ inputs.baseName }}${{ inputs.environment }}${{ inputs.location }}" >> $GITHUB_ENV
          echo "storageAccountSku=${{ inputs.defaultStorageAccountTier }}_${{ inputs.defaultStorageAccountReplicationType }}" >> $GITHUB_ENV

      - name: Check Resource Group Name
        run: echo "${{ env.resourceGroupName }}"

      - name: Check Terraform State File Name
        run: echo "${{ inputs.terraformStateFileName }}"

      - name: Check Storage Account Name
        run: echo "${{ env.storageAccountName }}"

      - name: 'Az CLI login'
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.azureClientId }}
          tenant-id: ${{ secrets.azureTenantId }}
          subscription-id: ${{ secrets.azureSubscriptionId }}

      - name: Create Resource Group
        run: |
          set -e
          
          if ! az group show --name "${{ env.resourceGroupName }} &> /dev/null; then
            echo "Resource group ${{ env.resourceGroupName }} does not exist. Creating..."
            az group create --name ${{ env.resourceGroupName }} --location ${{ inputs.location }}
          else
            echo "Resource group ${{ env.resourceGroupName }} already exists."
          fi

      - name: Create Remote Backend Storage Account and Container
        run: |
          set -e
          IP=$(curl -s https://ifconfig.me)
          wait_time=25

          remove_network_rule() {
            echo "Removing network rule for IP $IP"
            az storage account network-rule remove --resource-group ${{ env.resourceGroupName }} --account-name ${{ env.storageAccountName }} --ip-address $IP
          }

          trap remove_network_rule EXIT

          # if ! az storage account show --resource-group ${{ env.resourceGroupName }} --name ${{ env.storageAccountName }} > /dev/null 2>&1; then
          #   echo "Creating storage account ${{ env.storageAccountName }}..."
          #   az storage account create --resource-group ${{ env.resourceGroupName }} --name ${{ env.storageAccountName }} --sku ${{ env.storageAccountSku }} --encryption-services ${{ inputs.defaultStorageAccountEncryptionServices }} --min-tls-version ${{ inputs.defaultStorageAccountMinTlsVersion }} --location ${{ inputs.location }} --default-action Deny
          #   sleep $wait_time
          # else
          #   echo "Storage account ${{ env.storageAccountName }} already exists."
          # fi

          # echo "Adding network rule for $IP"
          # az storage account network-rule add --resource-group ${{ env.resourceGroupName }} --account-name ${{ env.storageAccountName }} --ip-address $IP
          # sleep $wait_time

          # KEY=$(az storage account keys list -g ${{ env.resourceGroupName }} -n ${{ env.storageAccountName }} --query "[0].value" -o tsv)

          # if ! az storage container show --name ${{ inputs.terraformStateContainerName }} --account-name ${{ env.storageAccountName }} --account-key $KEY > /dev/null 2>&1; then
          #   az storage container create --name ${{ inputs.terraformStateContainerName }} --account-name ${{ env.storageAccountName }} --account-key $KEY
          # fi

          # az storage container show --name ${{ inputs.terraformStateContainerName }} --account-name ${{ env.storageAccountName }} --account-key $KEY
