name: APIM Lab Terraform Plan, Approve, Apply
on: 
  workflow_dispatch:
    inputs:
      projectName:
        description: 'Select the project'
        required: true
        default: apim-lab
        type: choice
        options:
          - apim-lab
          - my-other-project
          - demo-project

      # resourceGroupName:
      #   type: string
      #   default: rg-apim-lab-dev-centralus
      # storageAccountName:
      #   type: string
      #   default: stapimlabdevcentralus
      # terraformStateContainerName:
      #   type: string
      #   default: tfstate
      # terraformStateBlobName:
      #   type: string
      #   default: terraform.tfstate
      # workingDirectory:
      #   type: string
      #   default: ./projects/apim-lab/terraform

permissions:
  id-token: write
  contents: read
  issues: write

env:
  PROJECT_DIRECTORY: ./projects/${{ inputs.projectName }}

jobs:

  extract-env:
    name: Extract Environment Variables
    runs-on: ubuntu-latest

    outputs:
      resourceGroupName: ${{ steps.export.outputs.resourceGroupName }}
      storageAccountName: ${{ steps.export.outputs.storageAccountName }}
      terraformStateContainerName: ${{ steps.export.outputs.terraformStateContainerName }}
      terraformStateBlobName: ${{ steps.export.outputs.terraformStateBlobName }}
      workingDirectory: ${{ steps.export.outputs.workingDirectory }}
    steps:
      - uses: c-py/action-dotenv-to-setenv@v5
        with:
          env-file: ${{ env.PROJECT_DIRECTORY }}/${{ inputs.projectName }}.env

      - id: export
        run: |
          echo "resourceGroupName=${resourceGroupName}" >> $GITHUB_OUTPUT
          echo "storageAccountName=${storageAccountName}" >> $GITHUB_OUTPUT
          echo "terraformStateContainerName=${terraformStateContainerName}" >> $GITHUB_OUTPUT
          echo "terraformStateBlobName=${terraformStateBlobName}" >> $GITHUB_OUTPUT
          echo "workingDirectory=${workingDirectory}" >> $GITHUB_OUTPUT


  terraform-plan:
    name: Terraform Plan
    needs: extract-env
    uses: almirbanjanovic/cloud-playground-infra/.github/workflows/terraform-plan.yaml@main
    with:
      resourceGroupName: ${{ needs.extract-env.outputs.resourceGroupName }}
      storageAccountName: ${{ needs.extract-env.outputs.storageAccountName }}
      terraformStateContainerName: ${{ needs.extract-env.outputs.terraformStateContainerName }}
      terraformStateBlobName: ${{ needs.extract-env.outputs.terraformStateBlobName }}
      workingDirectory: ${{ needs.extract-env.outputs.workingDirectory }}
    secrets:
      azureClientId: ${{ secrets.AZURE_CLIENT_ID }}
      azureTenantId: ${{ secrets.AZURE_TENANT_ID }}
      azureSubscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  
  # manual-approval:
  #   name: Manual Approval
  #   needs: [terraform-plan]
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: trstringer/manual-approval@v1
  #     with:
  #       secret: ${{ github.TOKEN }}
  #       approvers: almirbanjanovic
  #       minimum-approvals: 1
  #       issue-title: "Approve deployment to production"
  #       issue-body: "Please approve or deny the deployment."
  #       fail-on-denial: true


  # terraform-apply:
  #   name: Terraform Apply
  #   needs: [manual-approval]
  #   uses: almirbanjanovic/cloud-playground-infra/.github/workflows/terraform-apply.yaml@main
  #   with:
  #     resourceGroupName: ${{ inputs.resourceGroupName }}
  #     storageAccountName: ${{ inputs.storageAccountName }}
  #     terraformStateContainerName: ${{ inputs.terraformStateContainerName }}
  #     terraformStateBlobName: ${{ inputs.terraformStateBlobName }}
  #     workingDirectory: ${{ inputs.workingDirectory }}
  #   secrets:
  #     azureClientId: ${{ secrets.AZURE_CLIENT_ID }}
  #     azureTenantId: ${{ secrets.AZURE_TENANT_ID }}
  #     azureSubscriptionId: ${{ secrets.AZURE_SUBSCRIPTION_ID }}  